#!/usr/bin/env python3
"""
Test Mock Fix - Verify the mock test generator works with web interface
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Add src to path
sys.path.append(str(Path(__file__).parent / "src"))

from src.agents.mock_test_generator import MockTestGeneratorAgent

def test_mock_structure():
    """Test that mock generator returns correct structure"""
    print("🧪 Testing Mock Test Generator Structure")
    print("=" * 50)
    
    # Sample code
    sample_code = '''
def calculate_fibonacci(n):
    """Calculate the nth Fibonacci number"""
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)

class Calculator:
    def __init__(self):
        self.history = []
    
    def add(self, a, b):
        result = a + b
        self.history.append(f"{a} + {b} = {result}")
        return result
'''
    
    try:
        # Initialize mock test generator
        test_agent = MockTestGeneratorAgent()
        
        # Generate tests
        result = test_agent.generate_tests(sample_code, test_framework="pytest")
        
        print("✅ Mock test generation successful!")
        
        # Check structure
        print(f"\n📊 Result Structure:")
        print(f"   success: {result.get('success')}")
        print(f"   has 'tests': {'tests' in result}")
        print(f"   has 'coverage': {'coverage' in result}")
        print(f"   has 'raw_response': {'raw_response' in result}")
        print(f"   has 'summary': {'summary' in result}")
        print(f"   has 'suggestions': {'suggestions' in result}")
        
        # Check tests structure
        tests = result.get('tests', {})
        print(f"\n📋 Tests Structure:")
        print(f"   has 'test_count': {'test_count' in tests}")
        print(f"   has 'categories': {'categories' in tests}")
        print(f"   test_count: {tests.get('test_count', 'N/A')}")
        
        # Check categories
        categories = tests.get('categories', {})
        print(f"\n📈 Categories:")
        print(f"   unit_tests: {categories.get('unit_tests', 'N/A')}")
        print(f"   integration_tests: {categories.get('integration_tests', 'N/A')}")
        print(f"   edge_case_tests: {categories.get('edge_case_tests', 'N/A')}")
        print(f"   error_tests: {categories.get('error_tests', 'N/A')}")
        
        # Check coverage
        coverage = result.get('coverage', {})
        print(f"\n📊 Coverage:")
        print(f"   coverage_percentage: {coverage.get('coverage_percentage', 'N/A')}")
        print(f"   functions_covered: {coverage.get('functions_covered', 'N/A')}")
        print(f"   classes_covered: {coverage.get('classes_covered', 'N/A')}")
        
        # Check raw response
        raw_response = result.get('raw_response', '')
        print(f"\n📄 Raw Response Length: {len(raw_response)} characters")
        print(f"   Contains 'Unit Tests': {'Unit Tests' in raw_response}")
        print(f"   Contains 'Integration Tests': {'Integration Tests' in raw_response}")
        print(f"   Contains 'Edge Case Tests': {'Edge Case Tests' in raw_response}")
        
        print(f"\n🎯 Structure test completed successfully!")
        return True
        
    except Exception as e:
        print(f"❌ Test failed: {str(e)}")
        return False

def test_web_interface_compatibility():
    """Test that the result structure is compatible with web interface"""
    print("\n🌐 Testing Web Interface Compatibility")
    print("=" * 50)
    
    # Import the display function
    try:
        # Mock the display function to test structure compatibility
        sample_result = {
            "success": True,
            "tests": {
                "test_count": 15,
                "categories": {
                    "unit_tests": 3,
                    "integration_tests": 1,
                    "edge_case_tests": 1,
                    "error_tests": 1
                }
            },
            "coverage": {
                "coverage_percentage": 95,
                "functions_covered": 5,
                "classes_covered": 1,
                "complexity": "Medium"
            },
            "raw_response": "# Generated by CodeForge AI Mock Test Generator\n# Unit Tests\ndef test_basic():\n    assert True\n# Integration Tests\ndef test_integration():\n    assert True",
            "summary": "Generated 15 test cases",
            "suggestions": ["Replace placeholder assertions"]
        }
        
        # Test the detection logic
        is_mock_response = "raw_response" in sample_result and "coverage" in sample_result
        print(f"✅ Mock response detection: {is_mock_response}")
        
        # Test coverage access
        if is_mock_response:
            coverage = sample_result.get("coverage", {})
        else:
            coverage = sample_result.get("coverage_estimate", {})
        
        print(f"✅ Coverage access: {coverage.get('coverage_percentage', 'N/A')}%")
        
        # Test raw response access
        raw_response = sample_result.get("raw_response", "")
        print(f"✅ Raw response access: {len(raw_response)} characters")
        
        print(f"🎯 Web interface compatibility test passed!")
        return True
        
    except Exception as e:
        print(f"❌ Web interface compatibility test failed: {str(e)}")
        return False

if __name__ == "__main__":
    print("🚀 Testing Mock Test Generator Fix")
    print("=" * 60)
    
    # Run tests
    test1_passed = test_mock_structure()
    test2_passed = test_web_interface_compatibility()
    
    print(f"\n📋 Test Results:")
    print(f"   Mock Structure Test: {'✅ PASSED' if test1_passed else '❌ FAILED'}")
    print(f"   Web Interface Compatibility: {'✅ PASSED' if test2_passed else '❌ FAILED'}")
    
    if test1_passed and test2_passed:
        print(f"\n🎉 All tests passed! The mock fix should work correctly.")
    else:
        print(f"\n⚠️ Some tests failed. Please check the implementation.")
